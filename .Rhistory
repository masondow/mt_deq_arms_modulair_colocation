vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 150.4,
label = "Unhealthy",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 250.4,
label = "V. Unhealthy",
vjust = -0.5, hjust = 1.1) +
theme_minimal() +
theme(legend.position = "none")
# create boxplots of PM2.5 distributions by site and monitor
# uses stack_monitor_data function from function file
rp_stacked <- stack_monitor_data(rp_data, "datetime", names(rp_recode), rp_recode) # create "stacked" monitor data to invert columns and rows for plotting
ggplot(rp_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at RP Site", x = "Monitor", y = "PM2.5 (ug/m3)") +
geom_hline( # Add annotated line at each AQI breakpoint
yintercept = aqi_breaks,
color = aqi_colors,
linetype = "dashed"
) +
annotate("text", x = Inf, y = 12,
label = "Good",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 35.4,
label = "Moderate",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 55.4,
label = "USG",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 150.4,
label = "Unhealthy",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 250.4,
label = "V. Unhealthy",
vjust = -0.5, hjust = 1.1) +
theme_minimal() +
theme(legend.position = "none")
nc_stacked <- stack_monitor_data(nc_data, "datetime", names(nc_recode), nc_recode)
ggplot(nc_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at NC Site", x = "Monitor", y = "PM2.5 (ug/m3)") +
geom_hline(
yintercept = aqi_breaks,
color = aqi_colors,
linetype = "dashed"
) +
annotate("text", x = Inf, y = 12,
label = "Good",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 35.4,
label = "Moderate",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 55.4,
label = "USG",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 150.4,
label = "Unhealthy",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 250.4,
label = "V. Unhealthy",
vjust = -0.5, hjust = 1.1) +
theme_minimal() +
theme(legend.position = "none")
lt_stacked <- stack_monitor_data(lt_data, "datetime", names(lt_recode), lt_recode)
ggplot(lt_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at LT Site", x = "Monitor", y = "PM2.5 (ug/m3)") +
geom_hline(
yintercept = aqi_breaks,
color = aqi_colors,
linetype = "dashed"
) +
annotate("text", x = Inf, y = 12,
label = "Good",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 35.4,
label = "Moderate",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 55.4,
label = "USG",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 150.4,
label = "Unhealthy",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 250.4,
label = "V. Unhealthy",
vjust = -0.5, hjust = 1.1) +
theme_minimal() +
theme(legend.position = "none")
# Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(scales)
library(knitr)
library(AirMonitor)
library(here)
library(GGally)
library(patchwork)
source(here("functions", "analysis_functions.R"))
theme_set(theme_minimal())
# Load data from data folder
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# uses averaging_threshold and daily_averages functions from function file
# applies 75% (18 hr.) threshold to hourly values to caclulate daily averages
# Apply the function to each dataset:
rp_daily <- daily_averages(rp_data)
nc_daily <- daily_averages(nc_data)
lt_daily <- daily_averages(lt_data)
head(rp_daily)
# Color scheme for graphing by monitor types
monitor_colors <- c("1020" = "#56B4E9",
"1022" = "#D55E00",
"Thermo" = "#009E73",
"FEM Average" = "red",
"Modulair" = "#E69F00",
"PurpleAir" = "purple")
# Define recoding maps for each site to convert raw column names to monitor labels
rp_recode <- c("rp_1020" = "1020",
"rp_1022" = "1022",
"rp_thermo" = "Thermo",
"rp_fem_avg" = "FEM Average",
"rp_modulair_pm25" = "Modulair",
"rp_purpleair_cf1" = "PurpleAir")
nc_recode <- c("nc_1020" = "1020",
"nc_modulair_pm25" = "Modulair",
"nc_purpleair_cf1" = "PurpleAir")
lt_recode <- c("lt_thermo" = "Thermo",
"lt_modulair_pm25" = "Modulair",
"lt_purpleair_cf1" = "PurpleAir")
# Standard US daily PM2.5 AQI breakpoints (24-hr, updated 2024)
# Good: 0.0 - 9.0
# Moderate: 9.1 - 35.4
# Unhealthy for Sensitive Groups: 35.5 - 55.4
# Unhealthy: 55.5 - 125.4
# Very Unhealthy: 125.5 - 225.4
# Hazardous: 225.5 +
aqi_breaks  <- c(9, 35.4, 55.4, 125.4, 225.4)
aqi_colors  <- c("green", "yellow", "orange", "red", "purple")
# Hourly Data
# Add AQI categories using AirMonitor's aqiCategories() function.
rp_data <- rp_data %>%
mutate(rp_modulair_aqi = aqiCategories(rp_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_purpleair_aqi = aqiCategories(rp_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_fem_aqi = aqiCategories(rp_fem_avg, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
nc_data <- nc_data %>%
mutate(nc_modulair_aqi = aqiCategories(nc_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_purpleair_aqi = aqiCategories(nc_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_fem_aqi = aqiCategories(nc_1020, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
lt_data <- lt_data %>%
mutate(lt_modulair_aqi = aqiCategories(lt_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_purpleair_aqi = aqiCategories(lt_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_fem_aqi = aqiCategories(lt_thermo, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Daily Data
# Add AQI categories using AirMonitor's aqiCategories() function.
rp_daily <- rp_daily %>%
mutate(rp_modulair_aqi = aqiCategories(rp_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_purpleair_aqi = aqiCategories(rp_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_fem_aqi = aqiCategories(rp_fem_avg, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
nc_daily <- nc_daily %>%
mutate(nc_modulair_aqi = aqiCategories(nc_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_purpleair_aqi = aqiCategories(nc_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_fem_aqi = aqiCategories(nc_1020, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
lt_daily <- lt_daily %>%
mutate(lt_modulair_aqi = aqiCategories(lt_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_purpleair_aqi = aqiCategories(lt_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_fem_aqi = aqiCategories(lt_thermo, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# For all datasets, rename site-specific columns to common names via *_combined tables
rp_combined <- rp_data %>%
rename(
fem_avg = rp_fem_avg,            # FEM measurement
mod_pm25 = rp_modulair_pm25,       # Modulair PM2.5 measurement
mod_rh = rp_modulair_rh,           # Modulair measured RH
mod_tempc = rp_modulair_tempc,     # Modulair measured ambient temperature (°C)
fem_aqi = rp_fem_aqi,              # FEM AQI category
mod_aqi = rp_modulair_aqi          # Modulair AQI category
)
nc_combined <- nc_data %>%
rename(
fem_avg = nc_1020,          # FEM measurement from NC
mod_pm25 = nc_modulair_pm25,  # Modulair PM2.5 measurement
fem_aqi = nc_fem_aqi,         # FEM AQI category
mod_aqi = nc_modulair_aqi,     # Modulair AQI category
mod_rh = nc_modulair_rh,       # Modulair measured RH
mod_tempc = nc_modulair_tempc,     # Modulair measured ambient temperature (°C)
)
lt_combined <- lt_data %>%
rename(
fem_avg = lt_thermo,         # FEM measurement from LT
mod_pm25 = lt_modulair_pm25,   # Modulair PM2.5 measurement
fem_aqi = lt_fem_aqi,          # FEM AQI category
mod_aqi = lt_modulair_aqi,      # Modulair AQI category
mod_rh = lt_modulair_rh,        # Modulair measured RH
mod_tempc = lt_modulair_tempc,     # Modulair measured ambient temperature (°C)
)
# Combine the datasets into one dataset
combined_data <- bind_rows(rp_combined, nc_combined, lt_combined)
# Select only the columns that follow our standardized naming scheme (plus datetime and siteid)
combined_data <- combined_data %>%
select(siteid, datetime, fem_avg, mod_pm25, mod_rh, mod_tempc, fem_aqi, mod_aqi)
# Check the first few rows to verify the merge worked as expected.
head(combined_data)
# Summarize observations by site, AQI Category
# uses summarize_counts function from function file
# adjust fem_col, mod_col, aqi_col as appropriate for each dataset.
# For RP site:
rp_summary <- summarize_counts(
data     = rp_data,
fem_col  = "rp_fem_avg",       # or rp_fem_weighted_avg if that's your main reference
mod_col  = "rp_modulair_pm25",
aqi_col  = "rp_fem_aqi"
)
# For NC site
nc_summary <- summarize_counts(
data     = nc_data,
fem_col  = "nc_1020",
mod_col  = "nc_modulair_pm25",
aqi_col  = "nc_fem_aqi"
)
# For LT site:
lt_summary <- summarize_counts(
data     = lt_data,
fem_col  = "lt_thermo",
mod_col  = "lt_modulair_pm25",
aqi_col  = "lt_fem_aqi"
)
# Combine site-level summaries into one table, print w/ kable
combined_summaries <- bind_rows(rp_summary, nc_summary, lt_summary)
kable(
combined_summaries,
caption = "Summary of Observations and AQI Category Counts/Percentages by Site"
)
# build out descriptive statistics tables by site
# uses descriptive_stats function from function file
rp_stats <- descriptive_stats(rp_data)
nc_stats <- descriptive_stats(nc_data)
lt_stats <- descriptive_stats(lt_data)
kable(rp_stats, caption = "Descriptive Statistics - RP Site")
kable(nc_stats, caption = "Descriptive Statistics - NC Site")
kable(lt_stats, caption = "Descriptive Statistics - LT Site")
# create boxplots of PM2.5 distributions by site and monitor
# uses stack_monitor_data function from function file
rp_stacked <- stack_monitor_data(rp_data, "datetime", names(rp_recode), rp_recode) # create "stacked" monitor data to invert columns and rows for plotting
ggplot(rp_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at RP Site", x = "Monitor", y = "PM2.5 (ug/m3)") +
geom_hline( # Add annotated line at each AQI breakpoint
yintercept = aqi_breaks,
color = aqi_colors,
linetype = "dashed"
) +
annotate("text", x = Inf, y = 12,
label = "Good",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 35.4,
label = "Moderate",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 55.4,
label = "USG",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 150.4,
label = "Unhealthy",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 250.4,
label = "V. Unhealthy",
vjust = -0.5, hjust = 1.1) +
theme_minimal() +
theme(legend.position = "none")
nc_stacked <- stack_monitor_data(nc_data, "datetime", names(nc_recode), nc_recode)
ggplot(nc_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at NC Site", x = "Monitor", y = "PM2.5 (ug/m3)") +
geom_hline(
yintercept = aqi_breaks,
color = aqi_colors,
linetype = "dashed"
) +
annotate("text", x = Inf, y = 12,
label = "Good",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 35.4,
label = "Moderate",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 55.4,
label = "USG",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 150.4,
label = "Unhealthy",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 250.4,
label = "V. Unhealthy",
vjust = -0.5, hjust = 1.1) +
theme_minimal() +
theme(legend.position = "none")
lt_stacked <- stack_monitor_data(lt_data, "datetime", names(lt_recode), lt_recode)
ggplot(lt_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at LT Site", x = "Monitor", y = "PM2.5 (ug/m3)") +
geom_hline(
yintercept = aqi_breaks,
color = aqi_colors,
linetype = "dashed"
) +
annotate("text", x = Inf, y = 12,
label = "Good",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 35.4,
label = "Moderate",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 55.4,
label = "USG",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 150.4,
label = "Unhealthy",
vjust = -0.5, hjust = 1.1) +
annotate("text", x = Inf, y = 250.4,
label = "V. Unhealthy",
vjust = -0.5, hjust = 1.1) +
theme_minimal() +
theme(legend.position = "none")
final_date <- as.Date("2025-02-27")
# RP Site
ggplot(rp_daily, aes(x = date)) +
geom_line(aes(y = rp_1020, color = "1020")) +
geom_line(aes(y = rp_1022, color = "1022")) +
geom_line(aes(y = rp_thermo, color = "Thermo")) +
geom_line(aes(y = rp_modulair_pm25, color = "Modulair")) +
geom_line(aes(y = rp_purpleair_cf1, color = "PurpleAir")) +
# add AQI lines
geom_hline(
yintercept = aqi_breaks,
color = aqi_colors,
linetype = "dashed"
) +
annotate("text", x = final_date + days(50), y = 12,     label = "Good",         vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(50), y = 35.4,   label = "Moderate",     vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(50), y = 55.4,   label = "USG",          vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(50), y = 150.4,  label = "Unhealthy",    vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(50), y = 250.4,  label = "V. Unhealthy", vjust = -0.5, hjust = 1.1) +
scale_color_manual(values = monitor_colors) +
labs(
title = "PM2.5 Time Series at RP Site",
x = "Date",
y = "PM2.5 (µg/m³)",
color = "Monitor Type"
) +
theme_minimal()
# NC Site
ggplot(nc_daily, aes(x = date)) +
geom_line(aes(y = nc_1020, color = "1020")) +
geom_line(aes(y = nc_modulair_pm25, color = "Modulair")) +
geom_line(aes(y = nc_purpleair_cf1, color = "PurpleAir")) +
geom_hline(
yintercept = aqi_breaks,
color = aqi_colors,
linetype = "dashed"
) +
annotate("text", x = final_date + days(10), y = 12,     label = "Good",         vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(10), y = 35.4,   label = "Moderate",     vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(10), y = 55.4,   label = "USG",          vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(10), y = 150.4,  label = "Unhealthy",    vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(10), y = 250.4,  label = "V. Unhealthy", vjust = -0.5, hjust = 1.1) +
scale_color_manual(values = monitor_colors) +
labs(
title = "PM2.5 Time Series at NC Site",
x = "Date",
y = "PM2.5 (µg/m³)",
color = "Monitor Type"
) +
theme_minimal()
# LT Site
ggplot(lt_daily, aes(x = date)) +
geom_line(aes(y = lt_thermo, color = "Thermo")) +
geom_line(aes(y = lt_modulair_pm25, color = "Modulair")) +
geom_line(aes(y = lt_purpleair_cf1, color = "PurpleAir")) +
geom_hline(
yintercept = aqi_breaks,
color = aqi_colors,
linetype = "dashed"
) +
annotate("text", x = final_date + days(10), y = 12,     label = "Good",         vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(10), y = 35.4,   label = "Moderate",     vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(10), y = 55.4,   label = "USG",          vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(10), y = 150.4,  label = "Unhealthy",    vjust = -0.5, hjust = 1.1) +
annotate("text", x = final_date + days(10), y = 250.4,  label = "V. Unhealthy", vjust = -0.5, hjust = 1.1) +
scale_color_manual(values = monitor_colors) +
labs(
title = "PM2.5 Time Series at LT Site",
x = "Date",
y = "PM2.5 (µg/m³)",
color = "Monitor Type"
) +
theme_minimal()
plot_rp <- plot_fit(rp_data, mod_col = "rp_modulair_pm25", fem_col = "rp_fem_avg", site_label = "RP")
print(plot_rp)
plot_nc <- plot_fit(nc_data, mod_col = "nc_modulair_pm25", fem_col = "nc_1020", site_label = "NC")
print(plot_nc)
plot_lt <- plot_fit(lt_data, mod_col = "lt_modulair_pm25", fem_col = "lt_thermo", site_label = "LT")
print(plot_lt)
# Create correlation matrix with all variables to be potentially included in modeling using combined dataset
# - fem_avg: FEM PM2.5 measurement (true value)
# - mod_pm25: Modulair PM2.5 measurement (raw)
# - mod_rh: Modulair relative humidity
# - mod_tempc: Modulair ambient temperature (°C)
model_vars <- combined_data %>%
select(fem_avg, mod_pm25, mod_rh, mod_tempc)
# Calculate and visualize the correlation matrix using ggpairs
ggpairs(model_vars,
lower = list(continuous = wrap("smooth", alpha = 0.3, size = 0.1)),
upper = list(continuous = wrap("cor", size = 4)),
diag = list(continuous = "barDiag")) +
labs(title = "Correlation Matrix of Candidate Modeling Variables")
# For Loop to calculate accuracy metrics functions for each site & overall
datasets <- list(rp = rp_data, nc = nc_data, lt = lt_data)
results <- list()
col_info <- list(
rp = list(fem = "rp_fem_avg", mod = "rp_modulair_pm25", fem_aqi = "rp_fem_aqi", mod_aqi = "rp_modulair_aqi"),
nc = list(fem = "nc_1020", mod = "nc_modulair_pm25", fem_aqi = "nc_fem_aqi", mod_aqi = "nc_modulair_aqi"),
lt = list(fem = "lt_thermo", mod = "lt_modulair_pm25", fem_aqi = "lt_fem_aqi", mod_aqi = "lt_modulair_aqi")
)
for (site in names(datasets)) {
results[[site]] <- calculate_all_metrics(
data = datasets[[site]],
fem_col = col_info[[site]]$fem,
mod_col = col_info[[site]]$mod,
fem_aqi_col = col_info[[site]]$fem_aqi,
mod_aqi_col = col_info[[site]]$mod_aqi
)
}
# bind tables, print results
overall_table <- bind_rows(lapply(names(results), function(site) {
results[[site]]$overall %>% mutate(site = site)
}))
overall_table <- overall_table %>% select(site, everything())
kable(overall_table, caption = "Overall Accuracy Metrics by Site (FEM vs. Modulair)")
for (site in names(results)) {
print(kable(results[[site]]$stratified, caption = paste("Accuracy Metrics by AQI Category -", site, "Site")))
}
# apply accuracy metrics functions to combined dataset
combined_metrics <- calculate_all_metrics(
data = combined_data,
fem_col = "fem_avg",
mod_col = "mod_pm25",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "mod_aqi"
)
# Display the overall metrics for the combined dataset
print(combined_metrics$overall)
# Display the stratified accuracy metrics by AQI category for the combined dataset
kable(combined_metrics$stratified, caption = "Accuracy Metrics by AQI Category - Combined Data")
write.csv(combined_summaries)
View(combined_summaries)
write_csv(combined_summaries)
# Save All kable() Tables to Excel Files
# Define data folder
data_folder <- here("data")
# Create the folder if it doesn't exist
if (!dir.exists(data_folder)) {
dir.create(data_folder)
}
# Save each table individually
# 1. Summary of Observations and AQI Category Counts
write_xlsx(combined_summaries, file.path(data_folder, "summary_aqi_counts.xlsx"))
library(writexl)
library(writexl)
# Load necessary libraries
if (!require(writexl)) {
install.packages("writexl")
library(writexl)
}
# Load necessary libraries
if (!require(writexl)) {
install.packages("writexl")
library(writexl)
}
library(writexl)
library(writexl)
# Save All kable() Tables to Excel Files
library(writexl)
# Define data folder
data_folder <- here("data")
# Create the folder if it doesn't exist
if (!dir.exists(data_folder)) {
dir.create(data_folder)
}
# Save each table individually
# 1. Summary of Observations and AQI Category Counts
write_xlsx(combined_summaries, file.path(data_folder, "summary_aqi_counts.xlsx"))
# 2. Descriptive Statistics for RP
write_xlsx(rp_stats, file.path(data_folder, "rp_descriptive_stats.xlsx"))
# 3. Descriptive Statistics for NC
write_xlsx(nc_stats, file.path(data_folder, "nc_descriptive_stats.xlsx"))
# 4. Descriptive Statistics for LT
write_xlsx(lt_stats, file.path(data_folder, "lt_descriptive_stats.xlsx"))
# 5. Overall Accuracy Metrics
write_xlsx(overall_table, file.path(data_folder, "overall_accuracy_metrics.xlsx"))
# 6. Stratified Accuracy Metrics by AQI Category for RP, NC, LT
write_xlsx(results$rp$stratified, file.path(data_folder, "rp_stratified_accuracy_metrics.xlsx"))
write_xlsx(results$nc$stratified, file.path(data_folder, "nc_stratified_accuracy_metrics.xlsx"))
write_xlsx(results$lt$stratified, file.path(data_folder, "lt_stratified_accuracy_metrics.xlsx"))
# 7. Stratified Accuracy Metrics for Combined Data
write_xlsx(combined_metrics$stratified, file.path(data_folder, "combined_stratified_accuracy_metrics.xlsx"))
# Confirmation Message
cat("✅ All tables printed with kable() have been saved successfully to the data folder.\n")
