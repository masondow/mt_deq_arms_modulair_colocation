# For quadratic model (Model B), the recipe above includes a polynomial term.
quad_spec <- linear_reg() %>%
set_engine("lm")
# We can use the same model specification for the more complex recipes.
# Later, we might explore non-linear models via nls() or gam(), but for now we start with linear regression.
# Set up cross-validation (e.g., 5-fold CV)
cv_folds <- vfold_cv(combined_modeling_data, v = 5)
# Workflow for Model A (baseline: linear model with mod and rh)
wf_linear <- workflow() %>%
add_model(linear_spec) %>%
add_recipe(base_recipe)
# Workflow for Model B (quadratic: using quad_recipe)
wf_quad <- workflow() %>%
add_model(quad_spec) %>%
add_recipe(quad_recipe)
# Workflow for Model D/E (quadratic + RH interaction)
wf_quad_rh <- workflow() %>%
add_model(quad_spec) %>%
add_recipe(quad_rh_recipe)
# Fit models using cross-validation
res_linear <- wf_linear %>%
fit_resamples(resamples = cv_folds, metrics = metric_set(rmse, rsq, mae))
res_quad <- wf_quad %>%
fit_resamples(resamples = cv_folds, metrics = metric_set(rmse, rsq, mae))
res_quad_rh <- wf_quad_rh %>%
fit_resamples(resamples = cv_folds, metrics = metric_set(rmse, rsq, mae))
# Collect and compare metrics
metrics_linear <- collect_metrics(res_linear)
metrics_quad <- collect_metrics(res_quad)
metrics_quad_rh <- collect_metrics(res_quad_rh)
show_notes(.Last.tune.result)
data_split <- initial_split(combined_data, prop = 0.8)
data_split <- initial_split(combined_modeling_data, prop = 0.8)
training_data <- training(data_split)
testing_data  <- testing(data_split)
# Create a base recipe for modeling FEM PM2.5 using Modulair and RH as predictors.
base_recipe <- recipe(fem_avg ~ mod + rh, data = combined_modeling_data)
# For a quadratic model, we add a term for mod^2:
quad_recipe <- base_recipe %>%
step_poly(mod, degree = 2, options = list(raw = TRUE))
# For the quadratic + RH interaction, add an interaction term:
quad_rh_recipe <- quad_recipe %>%
step_interact(terms = ~ mod:rh)
# more later
# Linear regression model (Model A baseline)
linear_spec <- linear_reg() %>%
set_engine("lm")
# For quadratic model (Model B), the recipe above includes a polynomial term.
quad_spec <- linear_reg() %>%
set_engine("lm")
# We can use the same model specification for the more complex recipes.
# Later, we might explore non-linear models via nls() or gam(), but for now we start with linear regression.
# Workflow for Model A (baseline: linear model with mod and rh)
wf_linear <- workflow() %>%
add_model(linear_spec) %>%
add_recipe(base_recipe)
# Workflow for Model B (quadratic: using quad_recipe)
wf_quad <- workflow() %>%
add_model(quad_spec) %>%
add_recipe(quad_recipe)
# Workflow for Model D/E (quadratic + RH interaction)
wf_quad_rh <- workflow() %>%
add_model(quad_spec) %>%
add_recipe(quad_rh_recipe)
# Fit each workflow on the training data.
fit_linear <- wf_linear %>% fit(data = training_data)
fit_quad   <- wf_quad %>% fit(data = training_data)
fit_quad_rh <- wf_quad_rh %>% fit(data = training_data)
predictions <- predict(fit_linear, new_data = testing_data) %>%
bind_cols(testing_data)
# Evaluate performance using yardstick metrics (RMSE, R-squared, and MAE)
performance_metrics <- predictions %>%
metrics(truth = fem_avg, estimate = .pred) %>%
filter(.metric %in% c("rmse", "rsq", "mae"))
performance_metrics %>% knitr::kable(caption = "Performance Metrics (80/20 Split) for Linear Model")
predictions <- predict(fit_linear, new_data = testing_data) %>%
bind_cols(testing_data)
# Evaluate performance using yardstick metrics (RMSE, R-squared, and MAE)
performance_metrics <- predictions %>%
metrics(truth = fem_avg, estimate = .pred) %>%
filter(.metric %in% c("rmse", "rsq", "mae"))
performance_metrics %>% knitr::kable(caption = "Performance Metrics (80/20 Split) for Linear Model")
testing_accuracy <- calculate_all_metrics(
data = predictions,
fem_col = "fem_avg",
mod_col = ".pred",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "mod_aqi"
)
# Display overall accuracy metrics for the testing set:
testing_accuracy$overall %>% knitr::kable(caption = "Overall Accuracy Metrics on Testing Set")
# Base recipe using mod and rh as predictors for fem_avg
base_recipe <- recipe(fem_avg ~ mod + rh, data = training_data) %>%
update_role(fem_aqi, mod_aqi, new_role = "ID")
data_split <- initial_split(combined_modeling_data, prop = 0.8)
training_data <- training(data_split)
testing_data  <- testing(data_split)
# Base recipe using mod and rh as predictors for fem_avg
base_recipe <- recipe(fem_avg ~ mod + rh, data = training_data) %>%
update_role(fem_aqi, mod_aqi, new_role = "ID")
View(training_data)
# Recode columns (& merge datasets, ignoring merge for now)
rp_data <- rp_data %>%
rename(fem_avg = rp_fem_avg,
mod = rp_modulair_pm25,
fem_aqi = rp_fem_aqi,
mod_aqi = rp_modulair_aqi,
rh = rp_modulair_rh)
# #nc_combined <- nc_data %>%
#   rename(fem_avg = nc_1020,
#          mod = nc_modulair_pm25,
#          fem_aqi = nc_fem_aqi,
#          mod_aqi = nc_modulair_aqi,
#          rh = nc_modulair_rh)
#
# lt_combined <- lt_data %>%
#   rename(fem_avg = lt_thermo,
#          mod = lt_modulair_pm25,
#          fem_aqi = lt_fem_aqi,
#          mod_aqi = lt_modulair_aqi,
#          rh = lt_modulair_rh)
combined_modeling_data <- bind_rows(rp_combined)
# Recode columns (& merge datasets, ignoring merge for now)
rp_data <- rp_data %>%
rename(fem_avg = rp_fem_avg,
mod = rp_modulair_pm25,
fem_aqi = rp_fem_aqi,
mod_aqi = rp_modulair_aqi,
rh = rp_modulair_rh)
# Recode columns (& merge datasets, ignoring merge for now)
rp_data <- rp_data %>%
rename(fem_avg = rp_fem_avg,
mod = rp_modulair_pm25,
fem_aqi = rp_fem_aqi,
mod_aqi = rp_modulair_aqi,
rh = rp_modulair_rh)
# Load data from data folder
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# Add AQI categories using AirMonitor's aqiCategories() function.
rp_data <- rp_data %>%
mutate(rp_modulair_aqi = aqiCategories(rp_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_purpleair_aqi = aqiCategories(rp_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_fem_aqi = aqiCategories(rp_fem_avg, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
nc_data <- nc_data %>%
mutate(nc_modulair_aqi = aqiCategories(nc_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_purpleair_aqi = aqiCategories(nc_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_fem_aqi = aqiCategories(nc_1020, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
lt_data <- lt_data %>%
mutate(lt_modulair_aqi = aqiCategories(lt_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_purpleair_aqi = aqiCategories(lt_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_fem_aqi = aqiCategories(lt_thermo, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Recode columns (& merge datasets, ignoring merge for now)
rp_data <- rp_data %>%
rename(fem_avg = rp_fem_avg,
mod = rp_modulair_pm25,
fem_aqi = rp_fem_aqi,
mod_aqi = rp_modulair_aqi,
rh = rp_modulair_rh)
# #nc_combined <- nc_data %>%
#   rename(fem_avg = nc_1020,
#          mod = nc_modulair_pm25,
#          fem_aqi = nc_fem_aqi,
#          mod_aqi = nc_modulair_aqi,
#          rh = nc_modulair_rh)
#
# lt_combined <- lt_data %>%
#   rename(fem_avg = lt_thermo,
#          mod = lt_modulair_pm25,
#          fem_aqi = lt_fem_aqi,
#          mod_aqi = lt_modulair_aqi,
#          rh = lt_modulair_rh)
combined_modeling_data <- rp_data
View(combined_modeling_data)
data_split <- initial_split(combined_modeling_data, prop = 0.8)
training_data <- training(data_split)
testing_data  <- testing(data_split)
# Base recipe using mod and rh as predictors for fem_avg
base_recipe <- recipe(fem_avg ~ mod + rh, data = training_data) %>%
update_role(fem_aqi, mod_aqi, new_role = "ID")
View(training_data)
# Base recipe using mod and rh as predictors for fem_avg
base_recipe <- recipe(fem_avg ~ mod + rh, data = training_data)
# Quadratic recipe: add polynomial term for 'mod'
quad_recipe <- base_recipe %>%
step_poly(mod, degree = 2, options = list(raw = TRUE))
# Quadratic + RH interaction recipe: create an interaction term
quad_rh_recipe <- quad_recipe %>%
step_interact(terms = ~ mod * rh - mod - rh)
# more later
# Add AQI categories using AirMonitor's aqiCategories() function.
rp_data <- rp_data %>%
mutate(rp_modulair_aqi = aqiCategories(rp_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_purpleair_aqi = aqiCategories(rp_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_fem_aqi = aqiCategories(rp_fem_avg, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Load data from data folder
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# Add AQI categories using AirMonitor's aqiCategories() function.
rp_data <- rp_data %>%
mutate(rp_modulair_aqi = aqiCategories(rp_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_purpleair_aqi = aqiCategories(rp_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_fem_aqi = aqiCategories(rp_fem_avg, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
nc_data <- nc_data %>%
mutate(nc_modulair_aqi = aqiCategories(nc_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_purpleair_aqi = aqiCategories(nc_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_fem_aqi = aqiCategories(nc_1020, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
lt_data <- lt_data %>%
mutate(lt_modulair_aqi = aqiCategories(lt_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_purpleair_aqi = aqiCategories(lt_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_fem_aqi = aqiCategories(lt_thermo, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Recode columns (& merge datasets, ignoring merge for now)
rp_data <- rp_data %>%
rename(fem_avg = rp_fem_avg,
mod_pm25 = rp_modulair_pm25,
fem_aqi = rp_fem_aqi,
mod_aqi = rp_modulair_aqi,
mod_rh = rp_modulair_rh)
# #nc_combined <- nc_data %>%
#   rename(fem_avg = nc_1020,
#          mod = nc_modulair_pm25,
#          fem_aqi = nc_fem_aqi,
#          mod_aqi = nc_modulair_aqi,
#          rh = nc_modulair_rh)
#
# lt_combined <- lt_data %>%
#   rename(fem_avg = lt_thermo,
#          mod = lt_modulair_pm25,
#          fem_aqi = lt_fem_aqi,
#          mod_aqi = lt_modulair_aqi,
#          rh = lt_modulair_rh)
combined_modeling_data <- rp_data
data_split <- initial_split(combined_modeling_data, prop = 0.8)
training_data <- training(data_split)
testing_data  <- testing(data_split)
# Base recipe using mod and rh as predictors for fem_avg
base_recipe <- recipe(fem_avg ~ mod_pm25 + mod_rh, data = training_data)
# Quadratic recipe: add polynomial term for 'mod'
quad_recipe <- base_recipe %>%
step_poly(mod_pm25, degree = 2, options = list(raw = TRUE))
# Quadratic + RH interaction recipe: create an interaction term
quad_rh_recipe <- quad_recipe %>%
step_interact(terms = ~ mod_pm25 * mod_rh - mod_pm25 - mod_rh)
# more later
# Linear regression model (Model A baseline)
linear_spec <- linear_reg() %>%
set_engine("lm")
# For quadratic model (Model B), the recipe above includes a polynomial term.
quad_spec <- linear_reg() %>%
set_engine("lm")
# We can use the same model specification for the more complex recipes.
# Later, we might explore non-linear models via nls() or gam(), but for now we start with linear regression.
# Workflow for Model A (baseline: linear model with mod and rh)
wf_linear <- workflow() %>%
add_model(linear_spec) %>%
add_recipe(base_recipe)
# Workflow for Model B (quadratic: using quad_recipe)
wf_quad <- workflow() %>%
add_model(quad_spec) %>%
add_recipe(quad_recipe)
# Workflow for Model D/E (quadratic + RH interaction)
wf_quad_rh <- workflow() %>%
add_model(quad_spec) %>%
add_recipe(quad_rh_recipe)
# Fit each workflow on the training data.
fit_linear <- wf_linear %>% fit(data = training_data)
fit_quad   <- wf_quad %>% fit(data = training_data)
fit_quad_rh <- wf_quad_rh %>% fit(data = training_data)
predictions <- predict(fit_linear, new_data = testing_data) %>%
bind_cols(testing_data)
# Evaluate performance using yardstick metrics (RMSE, R-squared, and MAE)
performance_metrics <- predictions %>%
metrics(truth = fem_avg, estimate = .pred) %>%
filter(.metric %in% c("rmse", "rsq", "mae"))
performance_metrics %>% knitr::kable(caption = "Performance Metrics (80/20 Split) for Linear Model")
testing_accuracy <- calculate_all_metrics(
data = predictions,
fem_col = "fem_avg",
mod_col = ".pred",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "mod_aqi"
)
# Display overall accuracy metrics for the testing set:
testing_accuracy$overall %>% knitr::kable(caption = "Overall Accuracy Metrics on Testing Set")
View(performance_metrics)
View(predictions)
lm_predictions <- predict(fit_linear, new_data = testing_data) %>%
bind_cols(testing_data)
# Evaluate performance using yardstick metrics (RMSE, R-squared, and MAE)
performance_metrics <- predictions %>%
metrics(truth = fem_avg, estimate = .pred) %>%
filter(.metric %in% c("rmse", "rsq", "mae"))
performance_metrics %>% knitr::kable(caption = "Performance Metrics (80/20 Split) for Linear Model")
testing_accuracy <- calculate_all_metrics(
data = predictions,
fem_col = "fem_avg",
mod_col = ".pred",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "mod_aqi"
)
# Display overall accuracy metrics for the testing set:
testing_accuracy$overall %>% knitr::kable(caption = "Overall Accuracy Metrics on Testing Set")
View(lm_predictions)
# Apply the U.S. correction equation to the Modulair measurements
combined_modeling_data <- combined_modeling_data %>%
mutate(pa_us_correction = 0.524 * mod - 0.0862 * rh + 5.75)
# Apply the U.S. correction equation to the Modulair measurements
combined_modeling_data <- combined_modeling_data %>%
mutate(pa_us_correction = 0.524 * mod_pm25 - 0.0862 * mod_rh + 5.75)
# Calculate accuracy metrics for the raw Modulair data
raw_metrics <- calculate_all_metrics(
data = combined_modeling_data,
fem_col = "fem_avg",
mod_col = "mod",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "mod_aqi"
)
# Apply the U.S. correction equation to the Modulair measurements
combined_modeling_data <- combined_modeling_data %>%
mutate(pa_us_correction = 0.524 * mod_pm25 - 0.0862 * mod_rh + 5.75)
# Calculate accuracy metrics for the raw Modulair data
raw_metrics <- calculate_all_metrics(
data = combined_modeling_data,
fem_col = "fem_avg",
mod_col = "mod_pm25",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "mod_aqi"
)
# Calculate accuracy metrics for the data corrected using the U.S. equation
corrected_metrics <- calculate_all_metrics(
data = combined_modeling_data,
fem_col = "fem_avg",
mod_col = "pa_us_correction",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "mod_aqi"
)
# Print overall accuracy metrics for raw and corrected data
raw_metrics$overall %>%
knitr::kable(caption = "Overall Accuracy Metrics: Raw Modulair Data")
corrected_metrics$overall %>%
knitr::kable(caption = "Overall Accuracy Metrics: U.S. Correction Applied")
# Optionally, compare stratified metrics by AQI category as well
knitr::kable(corrected_metrics$stratified, caption = "Stratified Accuracy Metrics by AQI Category (Corrected Data)")
# Apply the U.S. correction equation to the Modulair measurements
combined_modeling_data <- combined_modeling_data %>%
mutate(
pa_us_correction = 0.524 * mod_pm25 - 0.0862 * mod_rh + 5.75,
pa_corrected_mod_aqi = aqiCategories(pa_us_correction, pollutant = "PM2.5", NAAQS = "PM2.5_2024")
)
# Calculate accuracy metrics for the raw Modulair data
raw_metrics <- calculate_all_metrics(
data = combined_modeling_data,
fem_col = "fem_avg",
mod_col = "mod_pm25",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "mod_aqi"
)
# Calculate accuracy metrics for the data corrected using the U.S. equation
corrected_metrics <- calculate_all_metrics(
data = combined_modeling_data,
fem_col = "fem_avg",
mod_col = "pa_us_correction",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "pa_corrected_mod_aqi"
)
# Print overall accuracy metrics for raw and corrected data
raw_metrics$overall %>%
knitr::kable(caption = "Overall Accuracy Metrics: Raw Modulair Data")
corrected_metrics$overall %>%
knitr::kable(caption = "Overall Accuracy Metrics: U.S. Correction Applied")
# Optionally, compare stratified metrics by AQI category as well
knitr::kable(corrected_metrics$stratified, caption = "Stratified Accuracy Metrics by AQI Category (Corrected Data)")
View(combined_modeling_data)
# Linear Model (PM2.5 and RH)
# Generate predictions on the testing set using the linear model.
lm_predictions <- predict(fit_linear, new_data = testing_data) %>%
bind_cols(testing_data) %>%
# Recalculate AQI categories using the predicted (corrected) PM2.5 values.
mutate(lm_corrected_mod_aqi = aqiCategories(.pred, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Evaluate performance using yardstick metrics: RMSE, R², and MAE.
performance_metrics <- lm_predictions %>%
metrics(truth = fem_avg, estimate = .pred) %>%
filter(.metric %in% c("rmse", "rsq", "mae"))
performance_metrics %>%
knitr::kable(caption = "Performance Metrics (80/20 Split) for Linear Model")
# Calculate overall and stratified accuracy metrics using our custom function.
testing_accuracy <- calculate_all_metrics(
data = lm_predictions,
fem_col = "fem_avg",
mod_col = ".pred",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "corrected_mod_aqi"
)
# Linear Model (PM2.5 and RH)
# Generate predictions on the testing set using the linear model.
lm_predictions <- predict(fit_linear, new_data = testing_data) %>%
bind_cols(testing_data) %>%
# Recalculate AQI categories using the predicted (corrected) PM2.5 values.
mutate(lm_corrected_mod_aqi = aqiCategories(.pred, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Evaluate performance using yardstick metrics: RMSE, R², and MAE.
performance_metrics <- lm_predictions %>%
metrics(truth = fem_avg, estimate = .pred) %>%
filter(.metric %in% c("rmse", "rsq", "mae"))
performance_metrics %>%
knitr::kable(caption = "Performance Metrics (80/20 Split) for Linear Model")
# Calculate overall and stratified accuracy metrics using our custom function.
testing_accuracy <- calculate_all_metrics(
data = lm_predictions,
fem_col = "fem_avg",
mod_col = ".pred",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "lm_corrected_mod_aqi"
)
# Display overall accuracy metrics for the testing set.
testing_accuracy$overall %>%
knitr::kable(caption = "Overall Accuracy Metrics on Testing Set")
# Linear Model (PM2.5 and RH)
# Generate predictions on the testing set using the linear model.
lm_predictions <- predict(fit_linear, new_data = testing_data) %>%
bind_cols(testing_data) %>%
# Recalculate AQI categories using the predicted (corrected) PM2.5 values.
mutate(lm_corrected_mod_aqi = aqiCategories(.pred, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Evaluate performance using yardstick metrics: RMSE, R², and MAE.
performance_metrics <- lm_predictions %>%
metrics(truth = fem_avg, estimate = .pred) %>%
filter(.metric %in% c("rmse", "rsq", "mae"))
performance_metrics %>%
knitr::kable(caption = "Performance Metrics (80/20 Split) for Linear Model")
# Calculate overall and stratified accuracy metrics using our custom function.
testing_accuracy <- calculate_all_metrics(
data = lm_predictions,
fem_col = "fem_avg",
mod_col = ".pred",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "lm_corrected_mod_aqi"
)
# Display overall accuracy metrics for the testing set.
testing_accuracy$overall %>%
knitr::kable(caption = "Overall LM Correction Accuracy Metrics on Testing Dataset")
# Display stratified accuracy metrics by AQI category for the testing set.
knitr::kable(testing_accuracy$stratified, caption = "Stratified LM Correction Accuracy Metrics by AQI Category - Testing Dataset")
View(lm_predictions)
plot_rp <- plot_fit(lm_predictions, mod_col = ".pred", fem_col = "fem_avg", site_label = "RP")
print(plot_rp)
# PA US-Wide Correction Equation
plot_rp <- plot_fit(combined_modeling_data, mod_col = "pa_us_correction", fem_col = "fem_avg", site_label = "RP")
print(plot_rp)
# Fit the linear model (baseline) on the entire combined_modeling_data dataset.
final_fit_linear <- wf_linear %>%
fit(data = combined_modeling_data)
# Generate predictions on the entire dataset and recalculate the AQI categories using the corrected values.
lm_predictions <- predict(final_fit_linear, new_data = combined_modeling_data) %>%
bind_cols(combined_modeling_data) %>%
mutate(corrected_mod_aqi = aqiCategories(.pred, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Evaluate performance using yardstick metrics (RMSE, R², and MAE).
final_performance_metrics <- lm_predictions %>%
metrics(truth = fem_avg, estimate = .pred) %>%
filter(.metric %in% c("rmse", "rsq", "mae"))
final_performance_metrics %>%
knitr::kable(caption = "Performance Metrics (Entire Dataset) for Linear Model")
# Calculate overall and stratified accuracy metrics using our custom function.
final_accuracy_metrics <- calculate_all_metrics(
data = lm_predictions,
fem_col = "fem_avg",
mod_col = ".pred",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "corrected_mod_aqi"
)
# Display the overall accuracy metrics.
final_accuracy_metrics$overall %>%
knitr::kable(caption = "Overall Accuracy Metrics on Entire Dataset")
# Display the stratified accuracy metrics by AQI category.
knitr::kable(final_accuracy_metrics$stratified, caption = "Stratified Accuracy Metrics by AQI Category - Entire Dataset")
# LM
plot_rp <- plot_fit(combined_modeling_data, mod_col = ".pred", fem_col = "fem_avg", site_label = "RP")
# LM
plot_rp <- plot_fit(combined_modeling_data, mod_col = "lm_predictions", fem_col = "fem_avg", site_label = "RP")
View(combined_modeling_data)
View(combined_modeling_data)
# Fit the linear model (baseline) on the entire combined_modeling_data dataset.
final_fit_linear <- wf_linear %>%
fit(data = combined_modeling_data)
# Generate predictions on the entire dataset and recalculate the AQI categories using the corrected values.
lm_predictions <- predict(final_fit_linear, new_data = combined_modeling_data) %>%
bind_cols(combined_modeling_data) %>%
mutate(corrected_mod_aqi = aqiCategories(.pred, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Evaluate performance using yardstick metrics (RMSE, R², and MAE).
final_performance_metrics <- lm_predictions %>%
metrics(truth = fem_avg, estimate = .pred) %>%
filter(.metric %in% c("rmse", "rsq", "mae"))
final_performance_metrics %>%
knitr::kable(caption = "Performance Metrics (Entire Dataset) for Linear Model")
# Calculate overall and stratified accuracy metrics using our custom function.
final_accuracy_metrics <- calculate_all_metrics(
data = lm_predictions,
fem_col = "fem_avg",
mod_col = ".pred",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "corrected_mod_aqi"
)
# Display the overall accuracy metrics.
final_accuracy_metrics$overall %>%
knitr::kable(caption = "Overall Accuracy Metrics on Entire Dataset")
# Display the stratified accuracy metrics by AQI category.
knitr::kable(final_accuracy_metrics$stratified, caption = "Stratified Accuracy Metrics by AQI Category - Entire Dataset")
View(combined_modeling_data)
View(lm_predictions)
# LM
plot_rp <- plot_fit(lm_predictions, mod_col = ".pred", fem_col = "fem_avg", site_label = "RP")
print(plot_rp)
