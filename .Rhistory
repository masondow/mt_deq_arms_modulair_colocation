# Define recoding maps for each site to convert raw column names to our desired monitor labels.
rp_recode <- c("rp_1020" = "1020",
"rp_1022" = "1022",
"rp_thermo" = "Thermo",
"rp_fem_avg" = "FEM Average",
"rp_modulair_pm25" = "Modulair",
"rp_purpleair_cf1" = "PurpleAir")
nc_recode <- c("nc_1020" = "1020",
"nc_modulair_pm25" = "Modulair",
"nc_purpleair_cf1" = "PurpleAir")
lt_recode <- c("lt_thermo" = "Thermo",
"lt_modulair_pm25" = "Modulair",
"lt_purpleair_cf1" = "PurpleAir")
# Load data from data folder
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# Function to generate descriptive statistics table for numeric columns
descriptive_stats <- function(data) {
data %>%
summarise(across(where(is.numeric),
list(mean = ~mean(.x, na.rm = TRUE),
sd   = ~sd(.x, na.rm = TRUE),
min  = ~min(.x, na.rm = TRUE),
max  = ~max(.x, na.rm = TRUE)))) %>%
pivot_longer(
cols = everything(),
names_to = c("parameter", ".value"),
names_pattern = "(.+)_(mean|sd|min|max)$"
)
}
# Generate descriptive statistics for each dataset
rp_stats <- descriptive_stats(rp_data)
nc_stats <- descriptive_stats(nc_data)
lt_stats <- descriptive_stats(lt_data)
# Display the tables
kable(rp_stats, caption = "Descriptive Statistics - RP Site")
kable(nc_stats, caption = "Descriptive Statistics - NC Site")
kable(lt_stats, caption = "Descriptive Statistics - LT Site")
# Helper function to stack monitor data into long format and recode monitor names.
# Arguments:
# - data: input data frame.
# - datetime_col: column name for the datetime.
# - monitor_cols: vector of column names for monitors.
# - recode_map: a named vector mapping raw monitor column names to desired labels.
stack_monitor_data <- function(data, datetime_col, monitor_cols, recode_map) {
data %>%
select(all_of(c(datetime_col, monitor_cols))) %>%
pivot_longer(-all_of(datetime_col), names_to = "monitor", values_to = "pm25") %>%
mutate(monitor = recode(monitor, !!!recode_map))
}
# RP site boxplot
rp_stacked <- stack_monitor_data(rp_data, "datetime", names(rp_recode), rp_recode)
ggplot(rp_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at RP Site",
x = "Monitor",
y = "PM2.5 (µg/m³)") +
theme(legend.position = "none")
# NC site boxplot
nc_stacked <- stack_monitor_data(nc_data, "datetime", names(nc_recode), nc_recode)
ggplot(nc_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at NC Site",
x = "Monitor",
y = "PM2.5 (µg/m³)") +
theme(legend.position = "none")
# LT site boxplot
lt_stacked <- stack_monitor_data(lt_data, "datetime", names(lt_recode), lt_recode)
ggplot(lt_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at LT Site",
x = "Monitor",
y = "PM2.5 (µg/m³)") +
theme(legend.position = "none")
# RP site time series
ggplot(rp_data, aes(x = datetime)) +
geom_line(aes(y = rp_1020, color = "1020")) +
geom_line(aes(y = rp_1022, color = "1022")) +
geom_line(aes(y = rp_thermo, color = "Thermo")) +
geom_line(aes(y = rp_modulair_pm25, color = "Modulair")) +
geom_line(aes(y = rp_purpleair_cf1, color = "PurpleAir")) +
scale_color_manual(values = monitor_colors) +
labs(title = "PM2.5 Time Series at RP Site",
x = "Datetime",
y = "PM2.5 (µg/m³)",
color = "Monitor Type")
# NC site time series
ggplot(nc_data, aes(x = datetime)) +
geom_line(aes(y = nc_1020, color = "1020")) +
geom_line(aes(y = nc_modulair_pm25, color = "Modulair")) +
geom_line(aes(y = nc_purpleair_cf1, color = "PurpleAir")) +
scale_color_manual(values = monitor_colors) +
labs(title = "PM2.5 Time Series at NC Site",
x = "Datetime",
y = "PM2.5 (µg/m³)",
color = "Monitor Type")
# LT site time series
ggplot(lt_data, aes(x = datetime)) +
geom_line(aes(y = lt_thermo, color = "Thermo")) +
geom_line(aes(y = lt_modulair_pm25, color = "Modulair")) +
geom_line(aes(y = lt_purpleair_cf1, color = "PurpleAir")) +
scale_color_manual(values = monitor_colors) +
labs(title = "PM2.5 Time Series at LT Site",
x = "Datetime",
y = "PM2.5 (µg/m³)",
color = "Monitor Type")
# Function to plot best fit line between Modulair and FEM measurements.
# FEM measurement (true value) is independent; Modulair is dependent.
plot_fit <- function(data, mod_col, fem_col, site_label) {
# Calculate Pearson correlation
correlation <- cor(data[[mod_col]], data[[fem_col]], use = "complete.obs", method = "pearson")
ggplot(data, aes_string(x = mod_col, y = fem_col)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
labs(title = paste("Best Fit for", site_label, "Site: Modulair vs FEM"),
x = "Modulair PM2.5 (µg/m³)",
y = "FEM PM2.5 (µg/m³)") +
theme_minimal() +
annotate("text", x = Inf, y = Inf, label = paste("r =", round(correlation, 2)),
hjust = 1.1, vjust = 1.1, size = 5, color = "blue")
}
# Create best-fit plots for each site.
plot_rp <- plot_fit(rp_data, mod_col = "rp_modulair_pm25", fem_col = "rp_fem_avg", site_label = "RP")
print(plot_rp)
plot_nc <- plot_fit(nc_data, mod_col = "nc_modulair_pm25", fem_col = "nc_1020", site_label = "NC")
print(plot_nc)
plot_lt <- plot_fit(lt_data, mod_col = "lt_modulair_pm25", fem_col = "lt_thermo", site_label = "LT")
print(plot_lt)
# Add AQI categories using AirMonitor's aqiCategories() function.
# For RP site:
rp_data <- rp_data %>%
mutate(rp_modulair_aqi = aqiCategories(rp_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_purpleair_aqi = aqiCategories(rp_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_fem_aqi = aqiCategories(rp_fem_avg, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# For NC site:
nc_data <- nc_data %>%
mutate(nc_modulair_aqi = aqiCategories(nc_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_purpleair_aqi = aqiCategories(nc_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_fem_aqi = aqiCategories(nc_1020, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# For LT site:
lt_data <- lt_data %>%
mutate(lt_modulair_aqi = aqiCategories(lt_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_purpleair_aqi = aqiCategories(lt_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_fem_aqi = aqiCategories(lt_thermo, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# Function to calculate overall accuracy metrics
# FEM monitor measurement is treated as the independent (true) variable,
# and the Modulair monitor measurement under evaluation is treated as the dependent (predicted) variable,
# per EPA recommendations.
calculate_metrics <- function(true_values, predicted_values) {
# Remove missing values
valid_idx <- !is.na(true_values) & !is.na(predicted_values)
true_vals <- true_values[valid_idx]
pred_vals <- predicted_values[valid_idx]
# Fit linear regression: predicted ~ true
# Here, 'true_vals' (FEM) is the independent variable, and 'pred_vals' (Modulair) is the dependent variable.
fit <- lm(pred_vals ~ true_vals)
slope <- coef(fit)[2]
intercept <- coef(fit)[1]
r_squared <- summary(fit)$r.squared
# Calculate residuals and error metrics
residuals <- true_vals - pred_vals
mae <- mean(abs(residuals))
avg_error <- mean(residuals)  # Average error including sign (bias)
rmse <- sqrt(mean(residuals^2))
nrmse <- rmse / mean(true_vals) * 100  # Expressed as a percentage
tibble(
R_squared = r_squared,
Average_Error = avg_error,
MAE = mae,
RMSE = rmse,
NRMSE = nrmse,
Slope = slope,
Intercept = intercept
)
}
# Function to calculate and combine all accuracy metrics:
# 1. Overall accuracy metrics
# 2. Stratified metrics by FEM AQI category
#
# Arguments:
# - data: data frame containing the collocation data.
# - fem_col: column name (string) for the FEM monitor measurement (independent variable).
# - mod_col: column name (string) for the Modulair monitor measurement (dependent variable).
# - fem_aqi_col: column name for the FEM AQI category.
# - mod_aqi_col: column name for the Modulair AQI category.
#
# EPA guidelines are followed by using the FEM monitor as the gold standard.
calculate_all_metrics <- function(data, fem_col, mod_col, fem_aqi_col, mod_aqi_col) {
# Calculate overall accuracy metrics using the FEM measurement as the true value
overall <- calculate_metrics(data[[fem_col]], data[[mod_col]])
# Calculate frequency of matching AQI categories between Modulair and FEM monitors.
aqi_match <- data %>%
mutate(match = (.data[[mod_aqi_col]] == .data[[fem_aqi_col]])) %>%
summarise(match_frequency = mean(match, na.rm = TRUE))
# Append the AQI match frequency to the overall metrics.
overall <- overall %>% mutate(aqi_match_frequency = aqi_match$match_frequency)
# Compute stratified metrics by FEM AQI category:
# For each AQI category group, we calculate the accuracy metrics and include the directional bias (Average_Error).
stratified <- data %>%
filter(!is.na(.data[[fem_aqi_col]])) %>%
group_by(category = .data[[fem_aqi_col]]) %>%
summarise(
Count = n(),
R_squared = if(n() > 1) cor(.data[[fem_col]], .data[[mod_col]], use = "complete.obs")^2 else NA_real_,
MAE = mean(abs(.data[[fem_col]] - .data[[mod_col]]), na.rm = TRUE),
Average_Error = mean(.data[[fem_col]] - .data[[mod_col]], na.rm = TRUE),
RMSE = sqrt(mean((.data[[fem_col]] - .data[[mod_col]])^2, na.rm = TRUE)),
NRMSE = (sqrt(mean((.data[[fem_col]] - .data[[mod_col]])^2, na.rm = TRUE)) / mean(.data[[fem_col]], na.rm = TRUE)) * 100,
.groups = "drop"
)
return(list(overall = overall, stratified = stratified))
}
# apply accuracy metrics functions to all three datasets
datasets <- list(rp = rp_data, nc = nc_data, lt = lt_data)
results <- list()
# Define the column names
col_info <- list(
rp = list(fem = "rp_fem_avg", mod = "rp_modulair_pm25", fem_aqi = "rp_fem_aqi", mod_aqi = "rp_modulair_aqi"),
nc = list(fem = "nc_1020", mod = "nc_modulair_pm25", fem_aqi = "nc_fem_aqi", mod_aqi = "nc_modulair_aqi"),
lt = list(fem = "lt_thermo", mod = "lt_modulair_pm25", fem_aqi = "lt_fem_aqi", mod_aqi = "lt_modulair_aqi")
)
# Loop over each dataset and apply the function.
for (site in names(datasets)) {
results[[site]] <- calculate_all_metrics(
data = datasets[[site]],
fem_col = col_info[[site]]$fem,
mod_col = col_info[[site]]$mod,
fem_aqi_col = col_info[[site]]$fem_aqi,
mod_aqi_col = col_info[[site]]$mod_aqi
)
}
# Build a single overall metrics table with each row representing a site
overall_table <- bind_rows(lapply(names(results), function(site) {
results[[site]]$overall %>% mutate(site = site)
}))
overall_table <- overall_table %>% select(site, everything())
# Print the overall metrics table, row by site
kable(overall_table, caption = "Overall Accuracy Metrics by Site (FEM vs. Modulair)")
# Print AQI stratified metrics for each site
for (site in names(results)) {
print(kable(results[[site]]$stratified, caption = paste("Accuracy Metrics by AQI Category -", site, "Site")))
}
source(here("R_analysis_functions.R"))
library(here)
source(here("R_analysis_functions.R"))
source(here("R_analysis_functions.R"))
source(here("analysis_functions.R"))
library(here)
source(here("analysis_functions.R"))
# Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(scales)
library(knitr)
library(AirMonitor)  # for aqiCategories()
library(here)
source(here("analysis_functions.R"))
source(here("functions", "analysis_functions.R"))
# Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(scales)
library(knitr)
library(AirMonitor)  # for aqiCategories()
library(here)
source(here("functions", "analysis_functions.R"))
theme_set(theme_minimal())
# Color scheme for monitor types.
monitor_colors <- c("1020" = "yellow",
"1022" = "red",
"Thermo" = "tan",
"FEM Average" = "green",
"Modulair" = "orange",
"PurpleAir" = "purple")
# Define recoding maps for each site to convert raw column names to our desired monitor labels.
rp_recode <- c("rp_1020" = "1020",
"rp_1022" = "1022",
"rp_thermo" = "Thermo",
"rp_fem_avg" = "FEM Average",
"rp_modulair_pm25" = "Modulair",
"rp_purpleair_cf1" = "PurpleAir")
nc_recode <- c("nc_1020" = "1020",
"nc_modulair_pm25" = "Modulair",
"nc_purpleair_cf1" = "PurpleAir")
lt_recode <- c("lt_thermo" = "Thermo",
"lt_modulair_pm25" = "Modulair",
"lt_purpleair_cf1" = "PurpleAir")
rp_stats <- descriptive_stats(rp_data)
nc_stats <- descriptive_stats(nc_data)
lt_stats <- descriptive_stats(lt_data)
kable(rp_stats, caption = "Descriptive Statistics - RP Site")
kable(nc_stats, caption = "Descriptive Statistics - NC Site")
kable(lt_stats, caption = "Descriptive Statistics - LT Site")
rp_stacked <- stack_monitor_data(rp_data, "datetime", names(rp_recode), rp_recode)
ggplot(rp_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at RP Site", x = "Monitor", y = "PM2.5 (µg/m³)") +
theme(legend.position = "none")
nc_stacked <- stack_monitor_data(nc_data, "datetime", names(nc_recode), nc_recode)
ggplot(nc_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at NC Site", x = "Monitor", y = "PM2.5 (µg/m³)") +
theme(legend.position = "none")
lt_stacked <- stack_monitor_data(lt_data, "datetime", names(lt_recode), lt_recode)
ggplot(lt_stacked, aes(x = monitor, y = pm25, fill = monitor)) +
geom_boxplot() +
scale_fill_manual(values = monitor_colors) +
labs(title = "PM2.5 Distribution at LT Site", x = "Monitor", y = "PM2.5 (µg/m³)") +
theme(legend.position = "none")
# RP Site
ggplot(rp_data, aes(x = datetime)) +
geom_line(aes(y = rp_1020, color = "1020")) +
geom_line(aes(y = rp_1022, color = "1022")) +
geom_line(aes(y = rp_thermo, color = "Thermo")) +
geom_line(aes(y = rp_modulair_pm25, color = "Modulair")) +
geom_line(aes(y = rp_purpleair_cf1, color = "PurpleAir")) +
scale_color_manual(values = monitor_colors) +
labs(title = "PM2.5 Time Series at RP Site", x = "Datetime", y = "PM2.5 (µg/m³)", color = "Monitor Type")
# NC Site
ggplot(nc_data, aes(x = datetime)) +
geom_line(aes(y = nc_1020, color = "1020")) +
geom_line(aes(y = nc_modulair_pm25, color = "Modulair")) +
geom_line(aes(y = nc_purpleair_cf1, color = "PurpleAir")) +
scale_color_manual(values = monitor_colors) +
labs(title = "PM2.5 Time Series at NC Site", x = "Datetime", y = "PM2.5 (µg/m³)", color = "Monitor Type")
# LT Site
ggplot(lt_data, aes(x = datetime)) +
geom_line(aes(y = lt_thermo, color = "Thermo")) +
geom_line(aes(y = lt_modulair_pm25, color = "Modulair")) +
geom_line(aes(y = lt_purpleair_cf1, color = "PurpleAir")) +
scale_color_manual(values = monitor_colors) +
labs(title = "PM2.5 Time Series at LT Site", x = "Datetime", y = "PM2.5 (µg/m³)", color = "Monitor Type")
plot_rp <- plot_fit(rp_data, mod_col = "rp_modulair_pm25", fem_col = "rp_fem_avg", site_label = "RP")
print(plot_rp)
plot_nc <- plot_fit(nc_data, mod_col = "nc_modulair_pm25", fem_col = "nc_1020", site_label = "NC")
print(plot_nc)
plot_lt <- plot_fit(lt_data, mod_col = "lt_modulair_pm25", fem_col = "lt_thermo", site_label = "LT")
print(plot_lt)
# Add AQI categories using AirMonitor's aqiCategories() function.
rp_data <- rp_data %>%
mutate(rp_modulair_aqi = aqiCategories(rp_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_purpleair_aqi = aqiCategories(rp_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
rp_fem_aqi = aqiCategories(rp_fem_avg, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
nc_data <- nc_data %>%
mutate(nc_modulair_aqi = aqiCategories(nc_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_purpleair_aqi = aqiCategories(nc_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
nc_fem_aqi = aqiCategories(nc_1020, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
lt_data <- lt_data %>%
mutate(lt_modulair_aqi = aqiCategories(lt_modulair_pm25, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_purpleair_aqi = aqiCategories(lt_purpleair_cf1, pollutant = "PM2.5", NAAQS = "PM2.5_2024"),
lt_fem_aqi = aqiCategories(lt_thermo, pollutant = "PM2.5", NAAQS = "PM2.5_2024"))
# apply accuracy metrics functions to all three datasets
datasets <- list(rp = rp_data, nc = nc_data, lt = lt_data)
results <- list()
col_info <- list(
rp = list(fem = "rp_fem_avg", mod = "rp_modulair_pm25", fem_aqi = "rp_fem_aqi", mod_aqi = "rp_modulair_aqi"),
nc = list(fem = "nc_1020", mod = "nc_modulair_pm25", fem_aqi = "nc_fem_aqi", mod_aqi = "nc_modulair_aqi"),
lt = list(fem = "lt_thermo", mod = "lt_modulair_pm25", fem_aqi = "lt_fem_aqi", mod_aqi = "lt_modulair_aqi")
)
for (site in names(datasets)) {
results[[site]] <- calculate_all_metrics(
data = datasets[[site]],
fem_col = col_info[[site]]$fem,
mod_col = col_info[[site]]$mod,
fem_aqi_col = col_info[[site]]$fem_aqi,
mod_aqi_col = col_info[[site]]$mod_aqi
)
}
overall_table <- bind_rows(lapply(names(results), function(site) {
results[[site]]$overall %>% mutate(site = site)
}))
overall_table <- overall_table %>% select(site, everything())
kable(overall_table, caption = "Overall Accuracy Metrics by Site (FEM vs. Modulair)")
for (site in names(results)) {
print(kable(results[[site]]$stratified, caption = paste("Accuracy Metrics by AQI Category -", site, "Site")))
}
# Combine datasets
rp_combined <- rp_data %>%
rename(
fem_avg = rp_fem_avg,
mod = rp_modulair_pm25,
fem_aqi = rp_fem_aqi,
mod_aqi = rp_modulair_aqi
)
nc_combined <- nc_data %>%
rename(
fem_avg = nc_1020,
mod = nc_modulair_pm25,
fem_aqi = nc_fem_aqi,
mod_aqi = nc_modulair_aqi
)
lt_combined <- lt_data %>%
rename(
fem_avg = lt_thermo,
mod = lt_modulair_pm25,
fem_aqi = lt_fem_aqi,
mod_aqi = lt_modulair_aqi
)
combined_data <- bind_rows(rp_combined, nc_combined, lt_combined)
# Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(scales)
library(knitr)
library(AirMonitor)  # for aqiCategories()
library(here)
source(here("functions", "analysis_functions.R"))
theme_set(theme_minimal())
# Color scheme for monitor types
monitor_colors <- c("1020" = "yellow",
"1022" = "red",
"Thermo" = "tan",
"FEM Average" = "green",
"Modulair" = "orange",
"PurpleAir" = "purple")
# Define recoding maps for each site to convert raw column names to monitor labels
rp_recode <- c("rp_1020" = "1020",
"rp_1022" = "1022",
"rp_thermo" = "Thermo",
"rp_fem_avg" = "FEM Average",
"rp_modulair_pm25" = "Modulair",
"rp_purpleair_cf1" = "PurpleAir")
nc_recode <- c("nc_1020" = "1020",
"nc_modulair_pm25" = "Modulair",
"nc_purpleair_cf1" = "PurpleAir")
lt_recode <- c("lt_thermo" = "Thermo",
"lt_modulair_pm25" = "Modulair",
"lt_purpleair_cf1" = "PurpleAir")
# apply accuracy metrics functions to combined dataset
combined_metrics <- calculate_all_metrics(
data = combined_data,
fem_col = "fem_avg",
mod_col = "mod",
fem_aqi_col = "fem_aqi",
mod_aqi_col = "mod_aqi"
)
# Display the overall metrics for the combined dataset
print(combined_metrics$overall)
# Display the stratified accuracy metrics by AQI category for the combined dataset
kable(combined_metrics$stratified, caption = "Accuracy Metrics by AQI Category - Combined Data")
View(combined_data)
View(rp_data)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
library(tidymodels)
library(tidyverse)
library(tidyverse)
library(readxl)
library(lubridate)
library(AirMonitor)
library(here)
source(here("functions", "analysis_functions.R"))
theme_set(theme_minimal())
# For tidymodels, seed by date for reproducibility.
set.seed(20250314)
# Load combined dataset (or combine individual datasets)
rp_combined <- rp_data %>%
rename(fem_avg = rp_fem_avg,
mod = rp_modulair_pm25,
fem_aqi = rp_fem_aqi,
mod_aqi = rp_modulair_aqi,
rh = rp_modulair_rh)
nc_combined <- nc_data %>%
rename(fem_avg = nc_1020,
mod = nc_modulair_pm25,
fem_aqi = nc_fem_aqi,
mod_aqi = nc_modulair_aqi,
rh = nc_modulair_rh)
lt_combined <- lt_data %>%
rename(fem_avg = lt_thermo,
mod = lt_modulair_pm25,
fem_aqi = lt_fem_aqi,
mod_aqi = lt_modulair_aqi,
rh = lt_modulair_rh)
combined_modeling_data <- bind_rows(rp_combined, nc_combined, lt_combined)
View(combined_modeling_data)
# Create a base recipe for modeling FEM PM2.5 using Modulair and RH as predictors.
base_recipe <- recipe(fem_avg ~ mod + rh, data = combined_data) %>%
update_role(fem_aqi, mod_aqi, new_role = "ID")  # mark AQI columns as IDs
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
pak::pak("tidymodels/tidymodels")
install.packages("Rtools")
install.packages("parallelly")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("parallelly")
library(Rtools)
library(installr)
library(Rtools)
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
library(tidymodels)
