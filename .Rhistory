nc_gaps <- check_time_gaps(nc_data, "NC")
rp_gaps <- check_time_gaps(rp_data, "RP")
time_gaps <- bind_rows(lt_gaps, nc_gaps, rp_gaps)
time_gaps
compute_missing_summary <- function(data, site_name) {
data %>%
summarise(
site = site_name,
missing_pm25_fem = sum(is.na(lt_thermo)),
missing_pm25_mod = sum(is.na(lt_modulair_pm25)),
missing_rh = sum(is.na(lt_modulair_rh)),
missing_temp = sum(is.na(lt_modulair_tempC))
)
}
lt_missing <- compute_missing_summary(lt_data, "LT")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(readxl)
# Define file paths (update these paths as needed)
lt_data <- read_excel("../data/LT_data.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(readxl)
# Define file paths (update these paths as needed)
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# Standardizing column names to lowercase
lt_data <- rename_with(lt_data, tolower)
nc_data <- rename_with(nc_data, tolower)
rp_data <- rename_with(rp_data, tolower)
lt_data <- lt_data %>% mutate(datetime = as_datetime(datetime))
nc_data <- nc_data %>% mutate(datetime = as_datetime(datetime))
rp_data <- rp_data %>% mutate(datetime = as_datetime(datetime))
# View data structures
glimpse(lt_data)
glimpse(nc_data)
glimpse(rp_data)
check_time_gaps <- function(data, site_name) {
data %>%
arrange(datetime) %>%
mutate(time_diff = difftime(datetime, lag(datetime), units = "hours")) %>%
count(time_diff, name = "count") %>%
mutate(site = site_name)
}
lt_gaps <- check_time_gaps(lt_data, "LT")
nc_gaps <- check_time_gaps(nc_data, "NC")
rp_gaps <- check_time_gaps(rp_data, "RP")
time_gaps <- bind_rows(lt_gaps, nc_gaps, rp_gaps)
time_gaps
compute_missing_summary <- function(data, site_name) {
data %>%
summarise(
site = site_name,
missing_pm25_fem = sum(is.na(.data[["lt_thermo"]]), na.rm = TRUE),
missing_pm25_mod = sum(is.na(.data[["lt_modulair_pm25"]]), na.rm = TRUE),
missing_rh = sum(is.na(.data[["lt_modulair_rh"]]), na.rm = TRUE),
missing_temp = sum(is.na(.data[["lt_modulair_tempc"]]), na.rm = TRUE)
)
}
lt_missing <- compute_missing_summary(lt_data, "LT")
nc_missing <- compute_missing_summary(nc_data, "NC")
compute_missing_summary <- function(data, site_name) {
data %>%
summarise(
site = site_name,
missing_pm25_fem = sum(is.na(.data[["lt_thermo"]]), na.rm = TRUE),
missing_pm25_mod = sum(is.na(.data[["lt_modulair_pm25"]]), na.rm = TRUE),
missing_rh = sum(is.na(.data[["lt_modulair_rh"]]), na.rm = TRUE),
missing_temp = sum(is.na(.data[["lt_modulair_tempc"]]), na.rm = TRUE)
)
}
lt_missing <- compute_missing_summary(lt_data, "LT")
nc_missing <- compute_missing_summary(nc_data, "NC")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(readxl)
# Define file paths (update these paths as needed)
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# Standardizing column names to lowercase
lt_data <- rename_with(lt_data, tolower)
nc_data <- rename_with(nc_data, tolower)
rp_data <- rename_with(rp_data, tolower)
lt_data <- lt_data %>% mutate(datetime = as_datetime(datetime))
nc_data <- nc_data %>% mutate(datetime = as_datetime(datetime))
rp_data <- rp_data %>% mutate(datetime = as_datetime(datetime))
# View data structures
glimpse(lt_data)
glimpse(nc_data)
glimpse(rp_data)
check_time_gaps <- function(data, site_name) {
data %>%
arrange(datetime) %>%
mutate(time_diff = difftime(datetime, lag(datetime), units = "hours")) %>%
count(time_diff, name = "count") %>%
mutate(site = site_name)
}
lt_gaps <- check_time_gaps(lt_data, "LT")
nc_gaps <- check_time_gaps(nc_data, "NC")
rp_gaps <- check_time_gaps(rp_data, "RP")
time_gaps <- bind_rows(lt_gaps, nc_gaps, rp_gaps)
time_gaps
compute_missing_summary <- function(data, site_name) {
fem_col <- names(data)[str_detect(names(data), "thermo|1020|fem_avg")] # Detect FEM column dynamically
mod_col <- names(data)[str_detect(names(data), "modulair_pm25")] # Detect Modulair PM2.5 column
rh_col <- names(data)[str_detect(names(data), "modulair_rh")] # Detect RH column
temp_col <- names(data)[str_detect(names(data), "modulair_tempc")] # Detect Temperature column
data %>%
summarise(
site = site_name,
missing_pm25_fem = sum(is.na(.data[[fem_col]])),
missing_pm25_mod = sum(is.na(.data[[mod_col]])),
missing_rh = sum(is.na(.data[[rh_col]])),
missing_temp = sum(is.na(.data[[temp_col]]))
)
}
lt_missing <- compute_missing_summary(lt_data, "LT")
nc_missing <- compute_missing_summary(nc_data, "NC")
rp_missing <- compute_missing_summary(rp_data, "RP")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(readxl)
# Define file paths (update these paths as needed)
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# Standardizing column names to lowercase
lt_data <- rename_with(lt_data, tolower)
nc_data <- rename_with(nc_data, tolower)
rp_data <- rename_with(rp_data, tolower)
lt_data <- lt_data %>% mutate(datetime = as_datetime(datetime))
nc_data <- nc_data %>% mutate(datetime = as_datetime(datetime))
rp_data <- rp_data %>% mutate(datetime = as_datetime(datetime))
# View data structures
glimpse(lt_data)
glimpse(nc_data)
glimpse(rp_data)
check_time_gaps <- function(data, site_name) {
data %>%
arrange(datetime) %>%
mutate(time_diff = difftime(datetime, lag(datetime), units = "hours")) %>%
count(time_diff, name = "count") %>%
mutate(site = site_name)
}
lt_gaps <- check_time_gaps(lt_data, "LT")
nc_gaps <- check_time_gaps(nc_data, "NC")
rp_gaps <- check_time_gaps(rp_data, "RP")
time_gaps <- bind_rows(lt_gaps, nc_gaps, rp_gaps)
time_gaps
compute_missing_summary <- function(data, site_name) {
fem_col <- names(data)[str_detect(names(data), "thermo|1020|fem_avg")] %>% first() # Selects the first matching FEM column
mod_col <- names(data)[str_detect(names(data), "modulair_pm25")] %>% first()
rh_col <- names(data)[str_detect(names(data), "modulair_rh")] %>% first()
temp_col <- names(data)[str_detect(names(data), "modulair_tempc")] %>% first()
data %>%
summarise(
site = site_name,
missing_pm25_fem = sum(is.na(.data[[fem_col]])),
missing_pm25_mod = sum(is.na(.data[[mod_col]])),
missing_rh = sum(is.na(.data[[rh_col]])),
missing_temp = sum(is.na(.data[[temp_col]]))
)
}
lt_missing <- compute_missing_summary(lt_data, "LT")
nc_missing <- compute_missing_summary(nc_data, "NC")
rp_missing <- compute_missing_summary(rp_data, "RP")
missing_table <- bind_rows(lt_missing, nc_missing, rp_missing)
missing_table
# Function to visualize outliers with boxplots
plot_outliers <- function(data, column, site_name) {
ggplot(data, aes(y = .data[[column]])) +
geom_boxplot() +
labs(title = paste("Outlier Detection for", column, "at", site_name),
y = column) +
theme_minimal()
}
# Generate outlier plots for PM2.5 concentrations
plot_outliers(lt_data, "lt_modulair_pm25", "LT")
plot_outliers(nc_data, "nc_modulair_pm25", "NC")
plot_outliers(rp_data, "rp_modulair_pm25", "RP")
# Generate histograms to visualize distributions
plot_histogram <- function(data, column, site_name) {
ggplot(data, aes(x = .data[[column]])) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(title = paste("Histogram of", column, "at", site_name),
x = column, y = "Frequency") +
theme_minimal()
}
plot_histogram(lt_data, "lt_modulair_pm25", "LT")
plot_histogram(nc_data, "nc_modulair_pm25", "NC")
plot_histogram(rp_data, "rp_modulair_pm25", "RP")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(readxl)
# Define file paths (update these paths as needed)
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# Standardizing column names to lowercase
lt_data <- rename_with(lt_data, tolower)
nc_data <- rename_with(nc_data, tolower)
rp_data <- rename_with(rp_data, tolower)
lt_data <- lt_data %>% mutate(datetime = as_datetime(datetime))
nc_data <- nc_data %>% mutate(datetime = as_datetime(datetime))
rp_data <- rp_data %>% mutate(datetime = as_datetime(datetime))
# View data structures
glimpse(lt_data)
glimpse(nc_data)
glimpse(rp_data)
check_time_gaps <- function(data, site_name) {
data %>%
arrange(datetime) %>%  # Ensures data is sorted chronologically
mutate(time_diff = difftime(datetime, lag(datetime), units = "hours")) %>%  # Computes time difference
count(time_diff, name = "count") %>%  # Counts occurrences of each unique time gap
mutate(site = site_name)  # Adds a site identifier
}
lt_gaps <- check_time_gaps(lt_data, "LT")
nc_gaps <- check_time_gaps(nc_data, "NC")
rp_gaps <- check_time_gaps(rp_data, "RP")
time_gaps <- bind_rows(lt_gaps, nc_gaps, rp_gaps)
time_gaps
compute_missing_summary <- function(data, site_name) {
fem_col <- names(data)[str_detect(names(data), "thermo|1020|1022|fem_avg")] %>% first() # Selects the first matching FEM column
mod_col <- names(data)[str_detect(names(data), "modulair_pm25")] %>% first()
rh_col <- names(data)[str_detect(names(data), "modulair_rh")] %>% first()
temp_col <- names(data)[str_detect(names(data), "modulair_tempc")] %>% first()
data %>%
summarise(
site = site_name,
missing_pm25_fem = sum(is.na(.data[[fem_col]])),
missing_pm25_mod = sum(is.na(.data[[mod_col]])),
missing_rh = sum(is.na(.data[[rh_col]])),
missing_temp = sum(is.na(.data[[temp_col]]))
)
}
lt_missing <- compute_missing_summary(lt_data, "LT")
nc_missing <- compute_missing_summary(nc_data, "NC")
rp_missing <- compute_missing_summary(rp_data, "RP")
missing_table <- bind_rows(lt_missing, nc_missing, rp_missing)
missing_table
# Function to visualize outliers with boxplots
plot_outliers <- function(data, column, site_name) {
ggplot(data, aes(y = .data[[column]])) +
geom_boxplot() +
labs(title = paste("Outlier Detection for", column, "at", site_name),
y = column) +
theme_minimal()
}
# Generate outlier plots for PM2.5 concentrations
plot_outliers(lt_data, "lt_modulair_pm25", "LT")
plot_outliers(nc_data, "nc_modulair_pm25", "NC")
plot_outliers(rp_data, "rp_modulair_pm25", "RP")
# Generate histograms to visualize distributions
plot_histogram <- function(data, column, site_name) {
ggplot(data, aes(x = .data[[column]])) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(title = paste("Histogram of", column, "at", site_name),
x = column, y = "Frequency") +
theme_minimal()
}
plot_histogram(lt_data, "lt_modulair_pm25", "LT")
plot_histogram(nc_data, "nc_modulair_pm25", "NC")
plot_histogram(rp_data, "rp_modulair_pm25", "RP")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(readxl)
# Define file paths (update these paths as needed)
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(readxl)
# Define file paths (update these paths as needed)
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# Standardizing column names to lowercase
lt_data <- rename_with(lt_data, tolower)
nc_data <- rename_with(nc_data, tolower)
rp_data <- rename_with(rp_data, tolower)
lt_data <- lt_data %>% mutate(datetime = as_datetime(datetime))
nc_data <- nc_data %>% mutate(datetime = as_datetime(datetime))
rp_data <- rp_data %>% mutate(datetime = as_datetime(datetime))
# View data structures
glimpse(lt_data)
glimpse(nc_data)
glimpse(rp_data)
summarize_pm25_stats <- function(data, site_name) {
data %>%
summarise(
site = site_name,
mean_pm25_fem = mean(fem_pm25, na.rm = TRUE),
sd_pm25_fem = sd(fem_pm25, na.rm = TRUE),
mean_pm25_mod = mean(modulair_pm25, na.rm = TRUE),
sd_pm25_mod = sd(modulair_pm25, na.rm = TRUE),
mean_rh = mean(modulair_rh, na.rm = TRUE),
mean_temp = mean(modulair_tempc, na.rm = TRUE)
)
}
lt_summary <- summarize_pm25_stats(lt_data, "LT")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(readxl)
# Define file paths
lt_data <- read_excel("../data/LT_data.xlsx")
nc_data <- read_excel("../data/NC_data.xlsx")
rp_data <- read_excel("../data/RP_data.xlsx")
# Standardizing column names to lowercase (will manually do this this in files later)
lt_data <- rename_with(lt_data, tolower)
nc_data <- rename_with(nc_data, tolower)
rp_data <- rename_with(rp_data, tolower)
lt_data <- lt_data %>% mutate(datetime = as_datetime(datetime))
nc_data <- nc_data %>% mutate(datetime = as_datetime(datetime))
rp_data <- rp_data %>% mutate(datetime = as_datetime(datetime))
# View data structures
glimpse(lt_data)
glimpse(nc_data)
glimpse(rp_data)
# LT Site
lt_summary <- lt_data %>%
summarise(
site = "LT",
mean_pm25_fem = mean(lt_thermo, na.rm = TRUE),
sd_pm25_fem = sd(lt_thermo, na.rm = TRUE),
mean_pm25_mod = mean(lt_modulair_pm25, na.rm = TRUE),
sd_pm25_mod = sd(lt_modulair_pm25, na.rm = TRUE),
mean_rh = mean(lt_modulair_rh, na.rm = TRUE),
mean_temp = mean(lt_modulair_tempc, na.rm = TRUE)
)
# NC Site
nc_summary <- nc_data %>%
summarise(
site = "NC",
mean_pm25_fem = mean(nc_1020, na.rm = TRUE),
sd_pm25_fem = sd(nc_1020, na.rm = TRUE),
mean_pm25_mod = mean(nc_modulair_pm25, na.rm = TRUE),
sd_pm25_mod = sd(nc_modulair_pm25, na.rm = TRUE),
mean_rh = mean(nc_modulair_rh, na.rm = TRUE),
mean_temp = mean(nc_modulair_tempc, na.rm = TRUE)
)
# RP Site (Comparing Multiple FEM Streams)
rp_summary <- rp_data %>%
summarise(
site = "RP",
mean_pm25_fem_1020 = mean(rp_1020, na.rm = TRUE),
sd_pm25_fem_1020 = sd(rp_1020, na.rm = TRUE),
mean_pm25_fem_1022 = mean(rp_1022, na.rm = TRUE),
sd_pm25_fem_1022 = sd(rp_1022, na.rm = TRUE),
mean_pm25_fem_avg = mean(rp_fem_avg, na.rm = TRUE),
sd_pm25_fem_avg = sd(rp_fem_avg, na.rm = TRUE),
mean_pm25_fem_weighted = mean(rp_fem_weighted_avg, na.rm = TRUE),
sd_pm25_fem_weighted = sd(rp_fem_weighted_avg, na.rm = TRUE),
mean_pm25_mod = mean(rp_modulair_pm25, na.rm = TRUE),
sd_pm25_mod = sd(rp_modulair_pm25, na.rm = TRUE)
)
summary_table <- bind_rows(lt_summary, nc_summary, rp_summary)
summary_table
# LT Site
cor_lt <- cor(lt_data$lt_thermo, lt_data$lt_modulair_pm25, use = "complete.obs")
# NC Site
cor_nc <- cor(nc_data$nc_1020, nc_data$nc_modulair_pm25, use = "complete.obs")
# RP Site (Comparing Different FEM Sources)
cor_rp <- tibble(
FEM_Source = c("RP_1020", "RP_1022", "RP_FEM_Avg", "RP_FEM_Weighted_Avg"),
Correlation = c(
cor(rp_data$rp_1020, rp_data$rp_modulair_pm25, use = "complete.obs"),
cor(rp_data$rp_1022, rp_data$rp_modulair_pm25, use = "complete.obs"),
cor(rp_data$rp_fem_avg, rp_data$rp_modulair_pm25, use = "complete.obs"),
cor(rp_data$rp_fem_weighted_avg, rp_data$rp_modulair_pm25, use = "complete.obs")
)
)
list(LT_Correlation = cor_lt, NC_Correlation = cor_nc, RP_Correlation_Table = cor_rp)
# LT Site
cor_lt <- cor(lt_data$lt_thermo, lt_data$lt_modulair_pm25, use = "complete.obs")
# NC Site
cor_nc <- cor(nc_data$nc_1020, nc_data$nc_modulair_pm25, use = "complete.obs")
# RP Site (Comparing Different FEM Sources)
cor_rp <- tibble(
FEM_Source = c("RP_1020", "RP_1022", "RP_FEM_Avg", "RP_FEM_Weighted_Avg"),
Correlation = c(
cor(rp_data$rp_1020, rp_data$rp_modulair_pm25, use = "complete.obs"),
cor(rp_data$rp_1022, rp_data$rp_modulair_pm25, use = "complete.obs"),
cor(rp_data$rp_fem_avg, rp_data$rp_modulair_pm25, use = "complete.obs"),
cor(rp_data$rp_fem_weighted_avg, rp_data$rp_modulair_pm25, use = "complete.obs")
)
)
list(LT_Correlation = cor_lt, NC_Correlation = cor_nc, RP_Correlation_Table = cor_rp)
library(gt)
# LT Site
lt_summary <- lt_data %>%
summarise(
site = "LT",
mean_pm25_fem = mean(lt_thermo, na.rm = TRUE),
sd_pm25_fem = sd(lt_thermo, na.rm = TRUE),
min_pm25_fem = min(lt_thermo, na.rm = TRUE),
max_pm25_fem = max(lt_thermo, na.rm = TRUE),
mean_pm25_mod = mean(lt_modulair_pm25, na.rm = TRUE),
sd_pm25_mod = sd(lt_modulair_pm25, na.rm = TRUE),
min_pm25_mod = min(lt_modulair_pm25, na.rm = TRUE),
max_pm25_mod = max(lt_modulair_pm25, na.rm = TRUE),
mean_rh = mean(lt_modulair_rh, na.rm = TRUE),
mean_temp = mean(lt_modulair_tempc, na.rm = TRUE)
)
# NC Site
nc_summary <- nc_data %>%
summarise(
site = "NC",
mean_pm25_fem = mean(nc_1020, na.rm = TRUE),
sd_pm25_fem = sd(nc_1020, na.rm = TRUE),
min_pm25_fem = min(nc_1020, na.rm = TRUE),
max_pm25_fem = max(nc_1020, na.rm = TRUE),
mean_pm25_mod = mean(nc_modulair_pm25, na.rm = TRUE),
sd_pm25_mod = sd(nc_modulair_pm25, na.rm = TRUE),
min_pm25_mod = min(nc_modulair_pm25, na.rm = TRUE),
max_pm25_mod = max(nc_modulair_pm25, na.rm = TRUE),
mean_rh = mean(nc_modulair_rh, na.rm = TRUE),
mean_temp = mean(nc_modulair_tempc, na.rm = TRUE)
)
# RP Site (Comparing Multiple FEM Streams)
rp_summary <- rp_data %>%
summarise(
site = "RP",
mean_pm25_fem_1020 = mean(rp_1020, na.rm = TRUE),
sd_pm25_fem_1020 = sd(rp_1020, na.rm = TRUE),
min_pm25_fem_1020 = min(rp_1020, na.rm = TRUE),
max_pm25_fem_1020 = max(rp_1020, na.rm = TRUE),
mean_pm25_fem_1022 = mean(rp_1022, na.rm = TRUE),
sd_pm25_fem_1022 = sd(rp_1022, na.rm = TRUE),
min_pm25_fem_1022 = min(rp_1022, na.rm = TRUE),
max_pm25_fem_1022 = max(rp_1022, na.rm = TRUE),
mean_pm25_fem_thermo = mean(rp_thermo, na.rm = TRUE),
sd_pm25_fem_thermo = sd(rp_thermo, na.rm = TRUE),
min_pm25_fem_thermo = min(rp_thermo, na.rm = TRUE),
max_pm25_fem_thermo = max(rp_thermo, na.rm = TRUE),
mean_pm25_fem_avg = mean(rp_fem_avg, na.rm = TRUE),
mean_pm25_fem_weighted = mean(rp_fem_weighted_avg, na.rm = TRUE),
mean_pm25_mod = mean(rp_modulair_pm25, na.rm = TRUE),
sd_pm25_mod = sd(rp_modulair_pm25, na.rm = TRUE),
min_pm25_mod = min(rp_modulair_pm25, na.rm = TRUE),
max_pm25_mod = max(rp_modulair_pm25, na.rm = TRUE)
)
summary_table <- bind_rows(lt_summary, nc_summary, rp_summary)
summary_table %>% gt()
ggplot() +
geom_boxplot(data = lt_data, aes(x = "LT", y = lt_thermo, fill = "FEM"), alpha = 0.6) +
geom_boxplot(data = lt_data, aes(x = "LT", y = lt_modulair_pm25, fill = "Modulair"), alpha = 0.6) +
geom_boxplot(data = nc_data, aes(x = "NC", y = nc_1020, fill = "FEM"), alpha = 0.6) +
geom_boxplot(data = nc_data, aes(x = "NC", y = nc_modulair_pm25, fill = "Modulair"), alpha = 0.6) +
geom_boxplot(data = rp_data, aes(x = "RP", y = rp_1020, fill = "FEM 1020"), alpha = 0.6) +
geom_boxplot(data = rp_data, aes(x = "RP", y = rp_1022, fill = "FEM 1022"), alpha = 0.6) +
geom_boxplot(data = rp_data, aes(x = "RP", y = rp_thermo, fill = "FEM Thermo"), alpha = 0.6) +
geom_boxplot(data = rp_data, aes(x = "RP", y = rp_fem_avg, fill = "FEM Avg"), alpha = 0.6) +
geom_boxplot(data = rp_data, aes(x = "RP", y = rp_fem_weighted_avg, fill = "FEM Weighted"), alpha = 0.6) +
geom_boxplot(data = rp_data, aes(x = "RP", y = rp_modulair_pm25, fill = "Modulair"), alpha = 0.6) +
labs(title = "PM2.5 Distribution by Site and Measurement Type",
x = "Site", y = "PM2.5 (µg/m³)") +
scale_fill_manual(values = c("FEM" = "blue", "Modulair" = "red",
"FEM 1020" = "green", "FEM 1022" = "purple",
"FEM Thermo" = "orange", "FEM Avg" = "cyan",
"FEM Weighted" = "magenta")) +
theme_minimal()
# LT Site
ggplot(lt_data, aes(x = "LT", y = lt_thermo, fill = "FEM")) +
geom_boxplot(alpha = 0.6) +
geom_boxplot(aes(y = lt_modulair_pm25, fill = "Modulair"), alpha = 0.6) +
labs(title = "PM2.5 Distribution at LT Site", x = "Site", y = "PM2.5 (µg/m³)") +
scale_fill_manual(values = c("FEM" = "blue", "Modulair" = "red")) +
theme_minimal()
# NC Site
ggplot(nc_data, aes(x = "NC", y = nc_1020, fill = "FEM")) +
geom_boxplot(alpha = 0.6) +
geom_boxplot(aes(y = nc_modulair_pm25, fill = "Modulair"), alpha = 0.6) +
labs(title = "PM2.5 Distribution at NC Site", x = "Site", y = "PM2.5 (µg/m³)") +
scale_fill_manual(values = c("FEM" = "blue", "Modulair" = "red")) +
theme_minimal()
# RP Site (Multiple FEM Sensors)
ggplot(rp_data) +
geom_boxplot(aes(x = "RP", y = rp_1020, fill = "FEM 1020"), alpha = 0.6) +
geom_boxplot(aes(x = "RP", y = rp_1022, fill = "FEM 1022"), alpha = 0.6) +
geom_boxplot(aes(x = "RP", y = rp_thermo, fill = "FEM Thermo"), alpha = 0.6) +
geom_boxplot(aes(x = "RP", y = rp_fem_avg, fill = "FEM Avg"), alpha = 0.6) +
geom_boxplot(aes(x = "RP", y = rp_fem_weighted_avg, fill = "FEM Weighted"), alpha = 0.6) +
geom_boxplot(aes(x = "RP", y = rp_modulair_pm25, fill = "Modulair"), alpha = 0.6) +
labs(title = "PM2.5 Distribution at RP Site", x = "Site", y = "PM2.5 (µg/m³)") +
scale_fill_manual(values = c("FEM 1020" = "green", "FEM 1022" = "purple",
"FEM Thermo" = "orange", "FEM Avg" = "cyan",
"FEM Weighted" = "magenta", "Modulair" = "red")) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
check_time_gaps <- function(data, site_name) {
data %>%
arrange(datetime) %>%  # Ensures data is sorted chronologically
mutate(time_diff = difftime(datetime, lag(datetime), units = "hours")) %>%  # Computes time difference
count(time_diff, name = "count") %>%  # Counts occurrences of each unique time gap
mutate(site = site_name)  # Adds a site identifier
}
lt_gaps <- check_time_gaps(lt_data, "LT")
nc_gaps <- check_time_gaps(nc_data, "NC")
rp_gaps <- check_time_gaps(rp_data, "RP")
time_gaps <- bind_rows(lt_gaps, nc_gaps, rp_gaps)
time_gaps
